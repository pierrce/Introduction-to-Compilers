/**********************************************************************
 Java CUP specification for a parser for cats programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;

/*Lists*/
non terminal LinkedList       declList;
non terminal LinkedList       formalsList;
non terminal LinkedList       stmtList;
non terminal LinkedList	      expList;
non terminal LinkedList	      formalParen;

/*Parent Nodes*/
non terminal DeclNode         decl;
non terminal TypeNode	      type;
non terminal ExpNode	      exp;
non terminal FnBodyNode       fnBody;
non terminal StmtNode	      stmt;

/*Decl Nodes*/
non terminal VarDeclNode      varDecl;
non terminal FormalDeclNode   formalDecl;

/*ExpNodes*/
non terminal DotAccessExpNode dotExp;
non terminal CallExpNode      callExp;
non terminal AssignNode	      assignExp;
non terminal UnaryExpNode     unaryExp;
non terminal BinaryExpNode    binaryExp;
non terminal IdNode           id;

 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left DOT;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS, TIMES, DIVIDE, NOT, OR, AND;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}

                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}

		| type:t id:i formalParen:fp fnBody:f
		{: RESULT = new FnDeclNode(t, i, new FormalsListNode(fp), f);
		:}

		| STRUCT id:i LCURLY declList:dl RCURLY SEMICOLON
		{: RESULT = new StructDeclNode(i, new DeclListNode(dl));
		:}
                ;

varDecl		::= type:t id:i SEMICOLON
		{: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
		:}

		| STRUCT id:ia id:ib SEMICOLON
		{: RESULT = new VarDeclNode(new StructNode(ia), ib, 0);
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

formalParen	::= LPAREN formalsList:fl RPAREN
		{: RESULT = fl;
		:}

		| LPAREN RPAREN
		{: LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
		   RESULT = fl;
		:}
		;

formalsList	::= formalsList:fl COMMA formalDecl:f
		{:  fl.addLast(f);
		    RESULT = fl;		   
		:}

		| formalDecl:f
		{: LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
		   fl.addLast(f);
		   RESULT = fl;
		:}
		;

fnBody		::= LCURLY declList:dl stmtList:sl RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(dl), new StmtListNode(sl));
		:}
		;

stmtList	::= stmtList:sl stmt:s
		{: sl.addLast(s);
		   RESULT = sl;
		:}

		| /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                
		| BOOL
		{: RESULT = new BoolNode();
		:}

		| VOID
		{: RESULT = new VoidNode();
		:}
		;

stmt		::= dotExp:l PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(l);
		:}

		| assignExp:a SEMICOLON
		{: RESULT = new AssignStmtNode(a);
		:}

		| dotExp:l MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(l);
		:}

		| CIN READ dotExp:l SEMICOLON 
		{: RESULT = new ReadStmtNode(l);
		:}

		| COUT WRITE exp:e SEMICOLON
		{: RESULT = new WriteStmtNode(e);
		:}
	
		| IF LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY 
		{: RESULT = new IfStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
		:}
		
		| IF LPAREN exp:e RPAREN LCURLY declList:dla stmtList:sla RCURLY
			ELSE LCURLY declList:dlb stmtList:slb RCURLY 
		{: RESULT = new IfElseStmtNode(e, new DeclListNode(dla),
			    new StmtListNode(sla), new DeclListNode(dlb), new StmtListNode(slb));
		:}

		| WHILE LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
		{: RESULT = new WhileStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
		:}

		| callExp:c SEMICOLON
		{: RESULT = new CallStmtNode(c);
		:}

		| RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}

		| RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null);
		:}
		;

assignExp	::= dotExp:l ASSIGN exp:e
		{: RESULT = new AssignNode(l, e);
		:}
		;

expList		::= expList:el COMMA exp:e
		{: el.addLast(e);
		   RESULT = el;
		:}

		| exp:e
		{: LinkedList<ExpNode> el = new LinkedList<ExpNode>();
		   el.add(e);
		   RESULT = el;
		:}
		;

exp		::= assignExp:a
		{: RESULT = a;
		:}

		| INTLITERAL:i
		{: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
		:}

		| STRINGLITERAL:s
		{: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
		:}

		| TRUE:t
		{: RESULT = new TrueNode(t.linenum, t.charnum);
		:}

		| FALSE:f
		{: RESULT = new FalseNode(f.linenum, f.charnum);
		:} 

		| LPAREN exp:e RPAREN
		{: RESULT = e;
		:}

		| dotExp:d
		{: RESULT = d;
		:}

		| unaryExp:u
		{: RESULT = u;
		:}

		| callExp:c
		{: RESULT = c;
		:}

		| binaryExp:b
		{: RESULT = b;
		:}
		;

dotExp		::= id:i
		{: RESULT = new DotAccessExpNode(null, i);
		:}

		| dotExp:d DOT id:i
		{: RESULT = new DotAccessExpNode(d, i);
		:}
		;

callExp		::= id:i LPAREN expList:el RPAREN
		{: RESULT = new CallExpNode(i, new ExpListNode(el));
		:}

		| id:i LPAREN RPAREN
		{: RESULT = new CallExpNode(i, null);
		:}
		;

unaryExp	::= MINUS exp:e
		{: RESULT = new UnaryMinusNode(e);
		:}

		| NOT exp:e
		{: RESULT = new NotNode(e);
		:}
		;

binaryExp	::= exp:ea PLUS exp:eb
		{: RESULT = new PlusNode(ea, eb);
		:}
		
		| exp:ea MINUS exp:eb
		{: RESULT = new MinusNode(ea, eb);
		:}
		
		| exp:ea TIMES exp:eb
		{: RESULT = new TimesNode(ea, eb);
		:}
		
		| exp:ea DIVIDE exp:eb
		{: RESULT = new DivideNode(ea, eb);
		:}

		| exp:ea AND exp:eb
		{: RESULT = new AndNode(ea, eb);
		:}

		| exp:ea OR exp:eb
		{: RESULT = new OrNode(ea, eb);
		:}

		| exp:ea EQUALS exp:eb
		{: RESULT = new EqualsNode(ea, eb);
		:}
	
		| exp:ea NOTEQUALS exp:eb
		{: RESULT = new NotEqualsNode(ea, eb);
		:}

		| exp:ea LESS exp:eb
		{: RESULT = new LessNode(ea, eb);
		:}

		| exp:ea GREATER exp:eb
		{: RESULT = new GreaterNode(ea, eb);
		:}

		| exp:ea LESSEQ exp:eb
		{: RESULT = new LessEqNode(ea, eb);
		:}
		
		| exp:ea GREATEREQ exp:eb
		{: RESULT = new GreaterEqNode(ea, eb);
		:}
		;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
